1. Template-driven Forms
Overview
Uses Angular directives in the HTML template.

Relies on ngModel for two-way data binding.

Requires importing FormsModule in app.module.ts.

Best for simple forms with minimal logic.

Example
Step 1: Import FormsModule
Add FormsModule in app.module.ts:

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';  // Import FormsModule
import { AppComponent } from './app.component';

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, FormsModule],  // Add FormsModule here
  bootstrap: [AppComponent]
})
export class AppModule { }


Step 2: Create the Form in Template
app.component.html:

<form #userForm="ngForm" (ngSubmit)="onSubmit(userForm)">
  <label for="name">Name:</label>
  <input type="text" id="name" name="name" [(ngModel)]="user.name" required>
  
  <label for="email">Email:</label>
  <input type="email" id="email" name="email" [(ngModel)]="user.email" required>

  <button type="submit" [disabled]="!userForm.valid">Submit</button>
</form>

<p>Entered Name: {{ user.name }}</p>
<p>Entered Email: {{ user.email }}</p>


Step 3: Define Component Logic
app.component.ts:

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
})
export class AppComponent {
  user = { name: '', email: '' };

  onSubmit(form: any) {
    console.log('Form Submitted!', form.value);
  }
}
---------------------------------

2. Reactive Forms (Model-driven Forms)
Overview
Uses FormControl, FormGroup, and FormArray in TypeScript.

Requires ReactiveFormsModule in app.module.ts.

Does not use ngModel.

Best for complex forms with dynamic logic and validation.

Example

Step 1: Import ReactiveFormsModule
Modify app.module.ts:
import { ReactiveFormsModule } from '@angular/forms';

@NgModule({
  imports: [BrowserModule, ReactiveFormsModule]
})
export class AppModule { }

Step 2: Define Form in Component
app.component.ts:
import { Component } from '@angular/core';
import { FormGroup, FormControl, Validators } from '@angular/forms';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
})
export class AppComponent {
  userForm = new FormGroup({
    name: new FormControl('', [Validators.required, Validators.minLength(3)]),
    email: new FormControl('', [Validators.required, Validators.email]),
  });

  onSubmit() {
    console.log('Form Data:', this.userForm.value);
  }
}

Step 3: Create Form Template
app.component.html:

<form [formGroup]="userForm" (ngSubmit)="onSubmit()">
  <label for="name">Name:</label>
  <input type="text" id="name" formControlName="name">
  <div *ngIf="userForm.controls['name'].invalid && userForm.controls['name'].touched">
    <small *ngIf="userForm.controls['name'].errors?.required">Name is required</small>
    <small *ngIf="userForm.controls['name'].errors?.minlength">Minimum 3 characters required</small>
  </div>

  <label for="email">Email:</label>
  <input type="email" id="email" formControlName="email">
  <div *ngIf="userForm.controls['email'].invalid && userForm.controls['email'].touched">
    <small *ngIf="userForm.controls['email'].errors?.required">Email is required</small>
    <small *ngIf="userForm.controls['email'].errors?.email">Invalid email format</small>
  </div>

  <button type="submit" [disabled]="userForm.invalid">Submit</button>
</form>

3. Dynamic Forms
Overview
Uses Reactive Forms but generates form controls dynamically.

Useful when the form fields are not known in advance (e.g., fetched from an API).

Best for dynamic and configurable forms.

Example
Step 1: Create a Dynamic Form
app.component.ts:

import { Component } from '@angular/core';
import { FormGroup, FormControl } from '@angular/forms';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
})
export class AppComponent {
  formFields = [
    { name: 'username', type: 'text', label: 'Username' },
    { name: 'email', type: 'email', label: 'Email' },
    { name: 'age', type: 'number', label: 'Age' }
  ];

  dynamicForm = new FormGroup({});

  constructor() {
    this.createForm();
  }

  createForm() {
    this.formFields.forEach(field => {
      this.dynamicForm.addControl(field.name, new FormControl(''));
    });
  }

  onSubmit() {
    console.log('Dynamic Form Data:', this.dynamicForm.value);
  }
}


Step 2: Create Dynamic Template
app.component.html:

<form [formGroup]="dynamicForm" (ngSubmit)="onSubmit()">
  <div *ngFor="let field of formFields">
    <label [for]="field.name">{{ field.label }}</label>
    <input [type]="field.type" [id]="field.name" [formControlName]="field.name">
  </div>
  <button type="submit">Submit</button>
</form>


----------------------------

Understanding FormArray
A FormArray is like an array of FormControls or FormGroups. Unlike FormGroup, where keys are predefined, FormArray allows adding/removing controls dynamically.

Example: Add & Remove Skills Dynamically
Step 1: Import ReactiveFormsModule
Modify app.module.ts:
import { ReactiveFormsModule } from '@angular/forms';

@NgModule({
  imports: [BrowserModule, ReactiveFormsModule]
})
export class AppModule { }

Step 2: Define the FormArray in TypeScript
app.component.ts:
import { Component } from '@angular/core';
import { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
})
export class AppComponent {
  userForm = new FormGroup({
    name: new FormControl('', Validators.required),
    skills: new FormArray([])  // Dynamic FormArray
  });

  get skills(): FormArray {
    return this.userForm.get('skills') as FormArray;
  }

  addSkill() {
    this.skills.push(new FormControl('', Validators.required));
  }

  removeSkill(index: number) {
    this.skills.removeAt(index);
  }

  onSubmit() {
    console.log('Form Data:', this.userForm.value);
  }
}

Step 3: Create Dynamic Form in HTML
app.component.html:

<form [formGroup]="userForm" (ngSubmit)="onSubmit()">
  <label for="name">Name:</label>
  <input id="name" type="text" formControlName="name">
  <div *ngIf="userForm.controls['name'].invalid && userForm.controls['name'].touched">
    <small>Name is required</small>
  </div>

  <h3>Skills</h3>
  <div formArrayName="skills">
    <div *ngFor="let skill of skills.controls; let i = index">
      <input type="text" [formControlName]="i">
      <button type="button" (click)="removeSkill(i)">Remove</button>
    </div>
  </div>

  <button type="button" (click)="addSkill()">Add Skill</button>
  <button type="submit" [disabled]="userForm.invalid">Submit</button>
</form>

<p>Form Value: {{ userForm.value | json }}</p>




